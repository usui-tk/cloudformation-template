{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC WebApplication Template",
  
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "SSHFrom" : {
      "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "WebServerCapacity": {
      "Default": "4",
      "Description" : "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "10",
      "ConstraintDescription" : "must be between 1 and 10 EC2 instances."
    }
  },
  
  "Mappings": {
    "RedhatRhelAmi" : {
      "us-east-1"      : { "AMI" : "ami-63b6910a" },
      "us-west-1"      : { "AMI" : "ami-3425be04" },
      "us-west-2"      : { "AMI" : "ami-e04b7aa5" },
      "sa-east-1"      : { "AMI" : "ami-e31cbafe" },
      "eu-west-1"      : { "AMI" : "ami-2ce30f5b" },
      "ap-southeast-1" : { "AMI" : "ami-5a1c4808" },
      "ap-southeast-2" : { "AMI" : "ami-c7db44fd" },
      "ap-northeast-1" : { "AMI" : "ami-111f7910" }
    },
    "AwsNatAmi": {
      "us-east-1"      : { "AMI" : "ami-ad227cc4" },
      "us-west-1"      : { "AMI" : "ami-d69aad93" },
      "us-west-2"      : { "AMI" : "ami-f032acc0" },
      "sa-east-1"      : { "AMI" : "ami-d78325ca" },
      "eu-west-1"      : { "AMI" : "ami-f3e30084" },
      "ap-southeast-1" : { "AMI" : "ami-f22772a0" },
      "ap-southeast-2" : { "AMI" : "ami-3bae3201" },
      "ap-northeast-1" : { "AMI" : "ami-cd43d9cc" }
    },
    "AZ": {
      "us-east-1":      { "primary": "us-east-1b",      "secondary": "us-east-1c" },
      "us-west-1":      { "primary": "us-west-1a",      "secondary": "us-west-1b" },
      "us-west-2":      { "primary": "us-west-2a",      "secondary": "us-west-2b" },
      "sa-east-1":      { "primary": "sa-east-1a",      "secondary": "sa-east-1b" },
      "eu-west-1":      { "primary": "eu-west-1a",      "secondary": "eu-west-1b" },
      "ap-southeast-1": { "primary": "ap-southeast-1a", "secondary": "ap-southeast-1b" },
      "ap-southeast-2": { "primary": "ap-southeast-2a", "secondary": "ap-southeast-2b" },
      "ap-northeast-1": { "primary": "ap-northeast-1a", "secondary": "ap-northeast-1c" }
    },
    "StackConfig" : {
      "VPC"               : { "CIDR" : "10.0.0.0/16" },
      "FrontendSubnet1"   : { "CIDR" : "10.0.0.0/24" },
      "FrontendSubnet2"   : { "CIDR" : "10.0.1.0/24" },
      "ApplicationSubnet1": { "CIDR" : "10.0.2.0/24" },
      "ApplicationSubnet2": { "CIDR" : "10.0.3.0/24" },
      "DatastoreSubnet1"  : { "CIDR" : "10.0.4.0/24" },
      "DatastoreSubnet2"  : { "CIDR" : "10.0.5.0/24" },
      "NATServer"         : { "InstanceType" : "m3.xlarge" },
      "BastionServer"     : { "InstanceType" : "i2.xlarge" },
      "ApplicationServer" : { "InstanceType" : "i2.xlarge" },
      "DatabaseServer"    : { "InstanceType" : "i2.2xlarge" }
    }
  },

  "Resources": {
    "PowerUserRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement": [ {
            "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" :[ {
          "PolicyName" : "PowerUserPolicy",
          "PolicyDocument" : {
            "Statement": [ {
              "Sid": "PowerUserStmt",
              "Effect": "Allow",
              "NotAction": "iam:*",
              "Resource": "*"
            } ]
          }
        }]
      }
    },
    "PowerUserProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path": "/",
        "Roles" : [ { "Ref" : "PowerUserRole" } ]
      }
    },


    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "StackConfig", "VPC", "CIDR" ]},
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy" : "default",
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "InternetGatewayId" : {"Ref" : "InternetGateway"}
      }
    },


    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "ProtectedRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Protected" }
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "ProtectedRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "RouteTableId": { "Ref": "ProtectedRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": { "Ref": "NATInstance" }
      }
    },


    "FrontendSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone": { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "primary" ]},
        "CidrBlock": { "Fn::FindInMap" : [ "StackConfig", "FrontendSubnet1", "CIDR" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "FrontendSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone": { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "secondary" ]},
        "CidrBlock": { "Fn::FindInMap" : [ "StackConfig", "FrontendSubnet2", "CIDR" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "ApplicationSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : { "Fn::FindInMap" : [ "StackConfig", "ApplicationSubnet1", "CIDR" ]},
        "AvailabilityZone" : { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "primary" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Protected" }
        ]
      }
    },
    "ApplicationSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : { "Fn::FindInMap" : [ "StackConfig", "ApplicationSubnet2", "CIDR" ]},
        "AvailabilityZone" : { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "secondary" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Protected" }
        ]
      }
    },
    "DatastoreSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "StackConfig", "DatastoreSubnet1", "CIDR" ]},
        "AvailabilityZone" : { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "primary" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Protected" }
        ]
      }
    },
    "DatastoreSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "StackConfig", "DatastoreSubnet2", "CIDR" ]},
        "AvailabilityZone" : { "Fn::FindInMap": [ "AZ", { "Ref": "AWS::Region" }, "secondary" ]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          {"Key" : "Network", "Value" : "Protected" }
        ]
      }
    },


    "FrontendSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FrontendSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "FrontendSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FrontendSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "ApplicationSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ApplicationSubnet1" },
        "RouteTableId" : { "Ref" : "ProtectedRouteTable" }
      }
    },
    "ApplicationSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "ApplicationSubnet2" },
        "RouteTableId" : { "Ref" : "ProtectedRouteTable" }
      }
    },
    "DatastoreSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DatastoreSubnet1" },
        "RouteTableId" : { "Ref" : "ProtectedRouteTable" }
      }
    },
    "DatastoreSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DatastoreSubnet2" },
        "RouteTableId" : { "Ref" : "ProtectedRouteTable" }
      }
    },


    "VPCDefaultSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Allow all communications in VPC",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : { "Fn::FindInMap" : [ "StackConfig", "VPC", "CIDR" ]} },
          { "IpProtocol" : "udp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : { "Fn::FindInMap" : [ "StackConfig", "VPC", "CIDR" ]} },
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Fn::FindInMap" : [ "StackConfig", "VPC", "CIDR" ]} }
        ]
      }
    },
    "PublicWebSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Public Security Group with HTTP access on port 443 from the internet",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },
    "PublicSSHSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" }}
        ]
      }
    },
    "PrivateSSHSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "10.0.0.0/16" }
        ]
      }
    },
    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Marker security group for NAT."
      }
    },
    "ApplicationSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "GroupDescription" : "Marker security group for Application server."
      }
    },
    "DatabaseSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "GroupDescription" : "Marker security group for Database server."
      }
    },


    "NATInstanceEIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": { "Ref": "NATInstance" }
      }
    },
    
    "NATInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "AwsNatAmi", { "Ref": "AWS::Region" }, "AMI" ]},
        "InstanceType": { "Fn::FindInMap" : [ "StackConfig", "NATServer", "InstanceType" ]},
        "SubnetId": { "Ref" : "FrontendSubnet1" },
        "SourceDestCheck": "false",
        "SecurityGroupIds" : [
          { "Ref" : "VPCDefaultSecurityGroup" },
          { "Ref" : "NATSecurityGroup" }
        ],
        "EbsOptimized" : "true",
        "BlockDeviceMappings" : [
          { "DeviceName" : "/dev/sda1", 
            "Ebs":{
              "VolumeSize":"256",
              "VolumeType":"io1",
              "Iops":"4000",
              "DeleteOnTermination":"true"
            }
          }
        ],
        "KeyName": { "Ref": "KeyName" },
        "IamInstanceProfile": { "Ref" : "PowerUserProfile" },
        "Tags": [
          { "Key": "Name", "Value": "NAT" }
        ],
        "Monitoring" : "true",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash -v\n",
          "LOGFILE=/tmp/cloud-init_script.log\n",

          "# cloud-init for NAT-Instance Customize\n",

          "echo \"cloud-init Execute START `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init NAT Instance yum update Start `date`\" >> ${LOGFILE}\n",
          "yum install -y yum-plugin-fastestmirror yum-plugin-changelog yum-plugin-priorities yum-plugin-versionlock yum-utils >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum install -y git >> ${LOGFILE}\n",
          "yum install -y iptstate iptraf iotop >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init NAT Instance yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Custom yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Custom yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init NAT Instance TimeZone Setting Start `date`\" >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "/bin/cp -fp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",
          "date >> ${LOGFILE}\n",
          "/sbin/service ntpd restart >> ${LOGFILE}\n",
          "sleep 5\n",
          "/usr/sbin/ntpq -p >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "echo \"cloud-init NAT Instance TimeZone Setting Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Execute Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cfn-init Execute Start `date`\" >> ${LOGFILE}\n",
          
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal --exit-code 1 --reason \"$1\" '", { "Ref" : "NatInstanceWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# CloudFormation Stack Create\n",
          "/opt/aws/bin/cfn-init --verbose --stack ", { "Ref" : "AWS::StackId" },
          "                      --resource NATInstance",
          "                      --configsets full_install",
          "                      --region ", { "Ref" : "AWS::Region" }, " >> ${LOGFILE} || error_exit 'Failed to run cfn-init'\n",

          "echo \"cfn-init Execute Complete `date`\" >> ${LOGFILE}\n",
          
          "echo \"cloud-init Last yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Last yum update Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2 Instance Restart\n",
          "/sbin/reboot >> ${LOGFILE}\n"
        ]]}}
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {

          "configSets" : { "full_install" : [ "2nd-bootstrap_settings" ] },

          "2nd-bootstrap_settings" : {
            "commands" : {
              "00_waiting_time" : {
                "command" : "echo \"/bin/sleep 30\" >> /etc/rc.d/rc.local"
              },
              "01_settings_chef-solo_execute" : {
                "command" : "echo \"/usr/bin/chef-solo --version\" >> /etc/rc.d/rc.local"
              },
              "02_settings_cfn-signal_result" : {
                "command" : { "Fn::Join" : ["", ["echo \"/opt/aws/bin/cfn-signal --exit-code \"'$?'\" --reason chef-solo_execute '", { "Ref" : "NatInstanceWaitHandle" }, "' \"  >> /etc/rc.d/rc.local"]]}
              },
              "03_unsettings_sleep" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sleep@#/bin/sleep@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "04_unsettings_cfn-signal" : {
                "command" : "echo \"/bin/sed -i 's@/opt/aws/bin/cfn-signal@#/opt/aws/bin/cfn-signal@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "05_unsettings_sed" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sed@#/bin/sed@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              }
            }
          }
        }
      }
    },

    "NatInstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },

    "NatInstanceWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : {"Ref" : "NatInstanceWaitHandle"},
        "Timeout" : "6000"
      }
    },


    "BastionInstanceEIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": { "Ref": "BastionInstance" }
      }
    },

    "BastionInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RedhatRhelAmi", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Fn::FindInMap" : [ "StackConfig", "BastionServer", "InstanceType" ]},
        "SubnetId": { "Ref" : "FrontendSubnet1" },
        "SecurityGroupIds" : [
          { "Ref" : "VPCDefaultSecurityGroup" },
          { "Ref" : "PublicSSHSecurityGroup" },
          { "Ref" : "PrivateSSHSecurityGroup" }
        ],
        "EbsOptimized" : "true",
        "BlockDeviceMappings" : [
          { "DeviceName" : "/dev/sda1", 
            "Ebs":{
              "VolumeSize":"256",
              "VolumeType":"io1",
              "Iops":"4000",
              "DeleteOnTermination":"true"
            }
          }
        ],
        "KeyName": { "Ref": "KeyName" },
        "IamInstanceProfile": { "Ref" : "PowerUserProfile" },
        "Tags": [
          { "Key": "Name", "Value": "Bastion" }
        ],
        "Monitoring" : "true",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash -v\n",
          "LOGFILE=/tmp/cloud-init_script.log\n",

          "# cloud-init for Bastion Instance Customize\n",

          "echo \"cloud-init Execute START `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Bastion Instance yum update Start `date`\" >> ${LOGFILE}\n",
          "yum update -y rh-amazon-rhui-client >> ${LOGFILE}\n",
          "yum-config-manager --enable rhui-REGION-rhel-server-supplementary >> ${LOGFILE}\n",
          "yum install -y yum-plugin-fastestmirror yum-plugin-changelog yum-plugin-priorities yum-plugin-versionlock yum-utils >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum install -y git >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Bastion Instance yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Custom yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Custom yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Bastion Instance SSH Deamon Trouble Fix for Bastion Instance v6.4-AMI Start `date`\" >> ${LOGFILE}\n",
          "sed -i '/^cat/d' /etc/rc.d/rc.local\n",
          "sed -i '/^UseDNS/d' /etc/rc.d/rc.local\n",
          "sed -i '/^PermitRootLogin/d' /etc/rc.d/rc.local\n",
          "sed -i '/^PermitRootLogin without-password/d' /etc/ssh/sshd_config\n",
          "/usr/sbin/sshd -t >> ${LOGFILE}\n",
          "/sbin/service sshd restart >> ${LOGFILE}\n",
          "echo \"cloud-init Bastion Instance SSH Deamon Trouble Fix for Bastion Instance v6.4-AMI Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Bastion Instance TimeZone Setting Start `date`\" >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "/bin/cp -fp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",
          "date >> ${LOGFILE}\n",
          "/usr/sbin/ntpdate 0.rhel.pool.ntp.org >> ${LOGFILE}\n",
          "/sbin/chkconfig ntpd on >> ${LOGFILE}\n",
          "/sbin/service ntpd start >> ${LOGFILE}\n",
          "sleep 5\n",
          "/usr/sbin/ntpq -p >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "echo \"cloud-init Bastion Instance TimeZone Setting Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Execute Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cfn-init Execute Start `date`\" >> ${LOGFILE}\n",
          
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal --exit-code 1 --reason \"$1\" '", { "Ref" : "BastionInstanceWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# CloudFormation Stack Create\n",
          "/opt/aws/bin/cfn-init --verbose --stack ", { "Ref" : "AWS::StackId" },
          "                      --resource BastionInstance",
          "                      --configsets full_install",
          "                      --region ", { "Ref" : "AWS::Region" }, " >> ${LOGFILE} || error_exit 'Failed to run cfn-init'\n",

          "echo \"cfn-init Execute Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2-EBS Resize for Root Volume\n",
          "echo \"cloud-init Root Disk Partition Resize Start `date`\" >> ${LOGFILE}\n",
          "/sbin/fdisk -l >>  ${LOGFILE}\n",
          "/sbin/fdisk /dev/xvda << __EOF__ >> ${LOGFILE}\n",
          "p\n",
          "d\n",
          "p\n",
          "n\n",
          "p\n",
          "1\n",
          "16\n",
          "\n",
          "w\n",
          "__EOF__\n",
          "/sbin/fdisk -l >>  ${LOGFILE}\n",
          "echo \"cloud-init Root Disk Partition Resize Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Swap File Create Start `date`\" >> ${LOGFILE}\n",
          "# Prevent the default behavior of the cloud-init\n",
          "sed -i 's@/dev/xvdb@#/dev/xvdb@g' /etc/fstab\n",
          "# Make Swap File\n",
          "/sbin/swapon -s >>  ${LOGFILE}\n",
          "/usr/bin/free >>  ${LOGFILE}\n",
          "/usr/bin/time dd if=/dev/zero of=/mnt/swap bs=1M count=1024 >>  ${LOGFILE}\n",
          "/sbin/mkswap /mnt/swap >>  ${LOGFILE}\n",
          "/sbin/swapon /mnt/swap >>  ${LOGFILE}\n",
          "/sbin/swapon -s >>  ${LOGFILE}\n",
          "/usr/bin/free >>  ${LOGFILE}\n",
          "cat /etc/fstab >>  ${LOGFILE}\n",
          "echo \"/mnt/swap  swap      swap    defaults        0 0\" >> /etc/fstab\n",
          "cat /etc/fstab >>  ${LOGFILE}\n",
          "echo \"cloud-init Swap File Create Complete `date`\" >> ${LOGFILE}\n",
          
          "echo \"cloud-init Last yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Last yum update Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2 Instance Restart\n",
          "/sbin/reboot >> ${LOGFILE}\n"
        ]]}}
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {

          "configSets" : { "full_install" : [ "preset_chef-solo", "2nd-bootstrap_settings" ] },

          "preset_chef-solo" : {
            "commands" : {
              "00_make_directory_for_cookbooks" : {
                "command" : "mkdir /tmp/cookbooks"
              },
              "01_create_devops_cookbook" : {
                "command" : "knife cookbook create devops -o /tmp/cookbooks/"
              },
              "02_clone_chef_recipe" : {
                "command" : "git clone https://github.com/iijima-toru-asdf/webap_materials.git /root/git"
              },
              "03_change_directory" : {
                "command" : "cd /root/git"
              },
              "04_copy_chef_recipe" : {
                "command" : "/bin/cp -fp /root/git/chef/recipes/* /tmp/cookbooks/devops/recipes/"
              },
              "05_copy_chef_files" : {
                "command" : "/bin/cp -fp /root/git/chef/files/* /tmp/cookbooks/devops/files/default/"
              },
              "06_copy_chef_template" : {
                "command" : "/bin/cp -fp /root/git/chef/templates/* /tmp/cookbooks/devops/templates/default/"
              },
              "07_copy_chef_config" : {
                "command" : "/bin/cp -fp /root/git/chef/config/* /tmp/cookbooks/"
              },
              "08_copy_chef_runlist" : {
                "command" : "/bin/cp -fp /root/git/chef/runlist/* /tmp/cookbooks/"
              }
            }
          },

          "2nd-bootstrap_settings" : {
            "commands" : {
              "00_setting_sleep" : {
                "command" : "echo \"/bin/sleep 30\" >> /etc/rc.d/rc.local"
              },
              "01_setting_execute_chef-solo" : {
                "command" : "echo \"/usr/bin/chef-solo -j /tmp/cookbooks/setup_jenkinsslave-serverspec.json -c /tmp/cookbooks/solo.rb\" >> /etc/rc.d/rc.local"
              },
              "02_settings_cfn-signal_result" : {
                "command" : { "Fn::Join" : ["", ["echo \"/opt/aws/bin/cfn-signal --exit-code \"'$?'\" --reason chef-solo_execute '", { "Ref" : "BastionInstanceWaitHandle" }, "' \"  >> /etc/rc.d/rc.local"]]}
              },
              "03_commentout_sleep" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sleep@#/bin/sleep@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "04_commentout_chef-solo" : {
                "command" : "echo \"/bin/sed -i 's@/usr/bin/chef-solo@#/usr/bin/chef-solo@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "05_commentout_cfn-signal" : {
                "command" : "echo \"/bin/sed -i 's@/opt/aws/bin/cfn-signal@#/opt/aws/bin/cfn-signal@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "06_commentout_sed" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sed@#/bin/sed@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              }
            }
          }
        }
      }
    },

    "BastionInstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },

    "BastionInstanceWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : {"Ref" : "BastionInstanceWaitHandle"},
        "Timeout" : "43000"
      }
    },


    "DatabaseInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "NatInstanceWaitCondition",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RedhatRhelAmi", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Fn::FindInMap" : [ "StackConfig", "DatabaseServer", "InstanceType" ]},
        "SubnetId": { "Ref" : "DatastoreSubnet1" },
        "SecurityGroupIds" : [
          { "Ref" : "VPCDefaultSecurityGroup" },
          { "Ref" : "PublicSSHSecurityGroup" },
          { "Ref" : "PrivateSSHSecurityGroup" },
          { "Ref" : "DatabaseSecurityGroup" }
        ],
        "EbsOptimized" : "true",
        "BlockDeviceMappings" : [
          { "DeviceName" : "/dev/sda1", 
            "Ebs":{
              "VolumeSize":"256",
              "VolumeType":"io1",
              "Iops":"4000",
              "DeleteOnTermination":"true"
            }
          }
        ],
        "KeyName": { "Ref": "KeyName" },
        "IamInstanceProfile": { "Ref" : "PowerUserProfile" },
        "Tags": [
          { "Key": "Name", "Value": "Database" }
        ],
        "Monitoring" : "true",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash -v\n",
          "LOGFILE=/tmp/cloud-init_script.log\n",

          "# cloud-init for Database Instance Customize\n",

          "echo \"cloud-init Execute START `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Database Instance yum update Start `date`\" >> ${LOGFILE}\n",
          "yum update -y rh-amazon-rhui-client >> ${LOGFILE}\n",
          "yum-config-manager --enable rhui-REGION-rhel-server-supplementary >> ${LOGFILE}\n",
          "yum install -y yum-plugin-fastestmirror yum-plugin-changelog yum-plugin-priorities yum-plugin-versionlock yum-utils >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum install -y git >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Database Instance yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Custom yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Custom yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Database Instance SSH Deamon Trouble Fix for Database Instance v6.4-AMI Start `date`\" >> ${LOGFILE}\n",
          "sed -i '/^cat/d' /etc/rc.d/rc.local\n",
          "sed -i '/^UseDNS/d' /etc/rc.d/rc.local\n",
          "sed -i '/^PermitRootLogin/d' /etc/rc.d/rc.local\n",
          "sed -i '/^PermitRootLogin without-password/d' /etc/ssh/sshd_config\n",
          "/usr/sbin/sshd -t >> ${LOGFILE}\n",
          "/sbin/service sshd restart >> ${LOGFILE}\n",
          "echo \"cloud-init Database Instance SSH Deamon Trouble Fix for Database Instance v6.4-AMI Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Database Instance TimeZone Setting Start `date`\" >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "/bin/cp -fp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",
          "date >> ${LOGFILE}\n",
          "/usr/sbin/ntpdate 0.rhel.pool.ntp.org >> ${LOGFILE}\n",
          "/sbin/chkconfig ntpd on >> ${LOGFILE}\n",
          "/sbin/service ntpd start >> ${LOGFILE}\n",
          "sleep 5\n",
          "/usr/sbin/ntpq -p >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "echo \"cloud-init Database Instance TimeZone Setting Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Execute Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cfn-init Execute Start `date`\" >> ${LOGFILE}\n",
          
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal --exit-code 1 --reason \"$1\" '", { "Ref" : "DatabaseInstanceWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# CloudFormation Stack Create\n",
          "/opt/aws/bin/cfn-init --verbose --stack ", { "Ref" : "AWS::StackId" },
          "                      --resource DatabaseInstance",
          "                      --configsets full_install",
          "                      --region ", { "Ref" : "AWS::Region" }, " >> ${LOGFILE} || error_exit 'Failed to run cfn-init'\n",

          "echo \"cfn-init Execute Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2-EBS Resize for Root Volume\n",
          "echo \"cloud-init Root Disk Partition Resize Start `date`\" >> ${LOGFILE}\n",
          "/sbin/fdisk -l >>  ${LOGFILE}\n",
          "/sbin/fdisk /dev/xvda << __EOF__ >> ${LOGFILE}\n",
          "p\n",
          "d\n",
          "p\n",
          "n\n",
          "p\n",
          "1\n",
          "16\n",
          "\n",
          "w\n",
          "__EOF__\n",
          "/sbin/fdisk -l >>  ${LOGFILE}\n",
          "echo \"cloud-init Root Disk Partition Resize Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Swap File Create Start `date`\" >> ${LOGFILE}\n",
          "# Prevent the default behavior of the cloud-init\n",
          "sed -i 's@/dev/xvdb@#/dev/xvdb@g' /etc/fstab\n",
          "# Make Swap File\n",
          "/sbin/swapon -s >>  ${LOGFILE}\n",
          "/usr/bin/free >>  ${LOGFILE}\n",
          "/usr/bin/time dd if=/dev/zero of=/mnt/swap bs=1M count=1024 >>  ${LOGFILE}\n",
          "/sbin/mkswap /mnt/swap >>  ${LOGFILE}\n",
          "/sbin/swapon /mnt/swap >>  ${LOGFILE}\n",
          "/sbin/swapon -s >>  ${LOGFILE}\n",
          "/usr/bin/free >>  ${LOGFILE}\n",
          "cat /etc/fstab >>  ${LOGFILE}\n",
          "echo \"/mnt/swap  swap      swap    defaults        0 0\" >> /etc/fstab\n",
          "cat /etc/fstab >>  ${LOGFILE}\n",
          "echo \"cloud-init Swap File Create Complete `date`\" >> ${LOGFILE}\n",
          
          "echo \"cloud-init Last yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Last yum update Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2 Instance Restart\n",
          "/sbin/reboot >> ${LOGFILE}\n"
        ]]}}
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {

          "configSets" : { "full_install" : [ "preset_chef-solo", "2nd-bootstrap_settings" ] },

          "preset_chef-solo" : {
            "commands" : {
              "00_make_directory_for_cookbooks" : {
                "command" : "mkdir /tmp/cookbooks"
              },
              "01_create_devops_cookbook" : {
                "command" : "knife cookbook create devops -o /tmp/cookbooks/"
              },
              "02_clone_chef_recipe" : {
                "command" : "git clone https://github.com/iijima-toru-asdf/webap_materials.git /root/git"
              },
              "03_change_directory" : {
                "command" : "cd /root/git"
              },
              "06_copy_chef_recipe" : {
                "command" : "/bin/cp -fp /root/git/chef/recipes/* /tmp/cookbooks/devops/recipes/"
              },
              "07_copy_chef_files" : {
                "command" : "/bin/cp -fp /root/git/chef/files/* /tmp/cookbooks/devops/files/default/"
              },
              "08_copy_chef_template" : {
                "command" : "/bin/cp -fp /root/git/chef/templates/* /tmp/cookbooks/devops/templates/default/"
              },
              "09_copy_chef_config" : {
                "command" : "/bin/cp -fp /root/git/chef/config/* /tmp/cookbooks/"
              },
              "10_copy_chef_runlist" : {
                "command" : "/bin/cp -fp /root/git/chef/runlist/* /tmp/cookbooks/"
              }
            }
          },

          "2nd-bootstrap_settings" : {
            "commands" : {
              "00_setting_sleep" : {
                "command" : "echo \"/bin/sleep 30\" >> /etc/rc.d/rc.local"
              },
              "01_setting_execute_chef-solo" : {
                "command" : "echo \"/usr/bin/chef-solo -j /tmp/cookbooks/setup_db.json -c /tmp/cookbooks/solo.rb\" >> /etc/rc.d/rc.local"
              },
              "02_settings_cfn-signal_result" : {
                "command" : { "Fn::Join" : ["", ["echo \"/opt/aws/bin/cfn-signal --exit-code \"'$?'\" --reason chef-solo_execute '", { "Ref" : "DatabaseInstanceWaitHandle" }, "' \"  >> /etc/rc.d/rc.local"]]}
              },
              "03_commentout_sleep" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sleep@#/bin/sleep@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "04_commentout_chef-solo" : {
                "command" : "echo \"/bin/sed -i 's@/usr/bin/chef-solo@#/usr/bin/chef-solo@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "05_commentout_cfn-signal" : {
                "command" : "echo \"/bin/sed -i 's@/opt/aws/bin/cfn-signal@#/opt/aws/bin/cfn-signal@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "06_commentout_sed" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sed@#/bin/sed@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              }
            }
          }
        }
      }
    },

    "DatabaseInstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },

    "DatabaseInstanceWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : {"Ref" : "DatabaseInstanceWaitHandle"},
        "Timeout" : "43000"
      }
    },


    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Subnets" : [
          { "Ref" : "FrontendSubnet1" },
          { "Ref" : "FrontendSubnet2" }
        ],
        "Listeners" : [
          { "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" }
        ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "2",
          "Interval" : "6",
          "Timeout" : "5"
        },
        "SecurityGroups" : [
          { "Ref" : "PublicWebSecurityGroup" }
        ]
      }
    },

    "ApplicationFleet" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MaxBatchSize" : "1",
          "MinInstancesInService" : "1",
          "PauseTime" : "PT30M00S"
        }
      },
      "Properties" : {
        "AvailabilityZones" : [
          { "Fn::GetAtt" : [ "ApplicationSubnet1", "AvailabilityZone" ] },
          { "Fn::GetAtt" : [ "ApplicationSubnet2", "AvailabilityZone" ] }
        ],
        "VPCZoneIdentifier" : [
          { "Ref" : "ApplicationSubnet1" },
          { "Ref" : "ApplicationSubnet2" }
        ],
        "LaunchConfigurationName" : { "Ref" : "ApplicationInstanceLaunchConfig"  },
        "MinSize" : "1",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "WebServerCapacity" },
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : "Application", "PropagateAtLaunch" : "true" }
        ]
      }
    },
    
    "ApplicationInstanceLaunchConfig"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : "DatabaseInstanceWaitCondition",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RedhatRhelAmi", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Fn::FindInMap" : [ "StackConfig", "ApplicationServer", "InstanceType" ]},
        "SecurityGroups": [
          { "Ref" : "VPCDefaultSecurityGroup" },
          { "Ref" : "PrivateSSHSecurityGroup" },
          { "Ref" : "ApplicationSecurityGroup" }
        ],
        "EbsOptimized" : "true",
        "BlockDeviceMappings" : [
          { "DeviceName" : "/dev/sda1", 
            "Ebs":{
              "VolumeSize":"256",
              "VolumeType":"io1",
              "Iops":"4000",
              "DeleteOnTermination":"true"
            }
          }
        ],
        "KeyName": { "Ref" : "KeyName" },
        "IamInstanceProfile": { "Ref" : "PowerUserProfile" },
        "InstanceMonitoring" : "true",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash -v\n",
          "LOGFILE=/tmp/cloud-init_script.log\n",

          "# cloud-init for Application Instance Customize\n",

          "echo \"cloud-init Execute START `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Application Instance yum update Start `date`\" >> ${LOGFILE}\n",
          "yum update -y rh-amazon-rhui-client >> ${LOGFILE}\n",
          "yum-config-manager --enable rhui-REGION-rhel-server-supplementary >> ${LOGFILE}\n",
          "yum install -y yum-plugin-fastestmirror yum-plugin-changelog yum-plugin-priorities yum-plugin-versionlock yum-utils >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum install -y git >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Application Instance yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Custom yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum localinstall -y https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-11.10.4-1.el6.x86_64.rpm >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Custom yum update Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Application Instance SSH Deamon Trouble Fix for Application Instance v6.4-AMI Start `date`\" >> ${LOGFILE}\n",
          "sed -i '/^cat/d' /etc/rc.d/rc.local\n",
          "sed -i '/^UseDNS/d' /etc/rc.d/rc.local\n",
          "sed -i '/^PermitRootLogin/d' /etc/rc.d/rc.local\n",
          "sed -i '/^PermitRootLogin without-password/d' /etc/ssh/sshd_config\n",
          "/usr/sbin/sshd -t >> ${LOGFILE}\n",
          "/sbin/service sshd restart >> ${LOGFILE}\n",
          "echo \"cloud-init Application Instance SSH Deamon Trouble Fix for Application Instance v6.4-AMI Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Application Instance TimeZone Setting Start `date`\" >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "/bin/cp -fp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n",
          "date >> ${LOGFILE}\n",
          "/usr/sbin/ntpdate 0.rhel.pool.ntp.org >> ${LOGFILE}\n",
          "/sbin/chkconfig ntpd on >> ${LOGFILE}\n",
          "/sbin/service ntpd start >> ${LOGFILE}\n",
          "sleep 5\n",
          "/usr/sbin/ntpq -p >> ${LOGFILE}\n",
          "date >> ${LOGFILE}\n",
          "echo \"cloud-init Application Instance TimeZone Setting Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Execute Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cfn-init Execute Start `date`\" >> ${LOGFILE}\n",
          
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal --exit-code 1 --reason \"$1\" '", { "Ref" : "ApplicationInstanceWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# CloudFormation Stack Create\n",
          "/opt/aws/bin/cfn-init --verbose --stack ", { "Ref" : "AWS::StackId" },
          "                      --resource ApplicationInstanceLaunchConfig",
          "                      --configsets full_install",
          "                      --region ", { "Ref" : "AWS::Region" }, " >> ${LOGFILE} || error_exit 'Failed to run cfn-init'\n",

          "echo \"cfn-init Execute Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2-EBS Resize for Root Volume\n",
          "echo \"cloud-init Root Disk Partition Resize Start `date`\" >> ${LOGFILE}\n",
          "/sbin/fdisk -l >>  ${LOGFILE}\n",
          "/sbin/fdisk /dev/xvda << __EOF__ >> ${LOGFILE}\n",
          "p\n",
          "d\n",
          "p\n",
          "n\n",
          "p\n",
          "1\n",
          "16\n",
          "\n",
          "w\n",
          "__EOF__\n",
          "/sbin/fdisk -l >>  ${LOGFILE}\n",
          "echo \"cloud-init Root Disk Partition Resize Complete `date`\" >> ${LOGFILE}\n",

          "echo \"cloud-init Swap File Create Start `date`\" >> ${LOGFILE}\n",
          "# Prevent the default behavior of the cloud-init\n",
          "sed -i 's@/dev/xvdb@#/dev/xvdb@g' /etc/fstab\n",
          "# Make Swap File\n",
          "/sbin/swapon -s >>  ${LOGFILE}\n",
          "/usr/bin/free >>  ${LOGFILE}\n",
          "/usr/bin/time dd if=/dev/zero of=/mnt/swap bs=1M count=1024 >>  ${LOGFILE}\n",
          "/sbin/mkswap /mnt/swap >>  ${LOGFILE}\n",
          "/sbin/swapon /mnt/swap >>  ${LOGFILE}\n",
          "/sbin/swapon -s >>  ${LOGFILE}\n",
          "/usr/bin/free >>  ${LOGFILE}\n",
          "cat /etc/fstab >>  ${LOGFILE}\n",
          "echo \"/mnt/swap  swap      swap    defaults        0 0\" >> /etc/fstab\n",
          "cat /etc/fstab >>  ${LOGFILE}\n",
          "echo \"cloud-init Swap File Create Complete `date`\" >> ${LOGFILE}\n",
          
          "echo \"cloud-init Last yum update Start `date`\" >> ${LOGFILE}\n",
          "yum clean all >> ${LOGFILE}\n",
          "yum update -y >> ${LOGFILE}\n",
          "echo \"cloud-init Last yum update Complete `date`\" >> ${LOGFILE}\n",
          
          "# EC2 Instance Restart\n",
          "/sbin/reboot >> ${LOGFILE}\n"
        ]]}}
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {

          "configSets" : { "full_install" : [ "preset_chef-solo", "2nd-bootstrap_settings" ] },

          "preset_chef-solo" : {
            "commands" : {
              "00_make_directory_for_cookbooks" : {
                "command" : "mkdir /tmp/cookbooks"
              },
              "01_create_devops_cookbook" : {
                "command" : "knife cookbook create devops -o /tmp/cookbooks/"
              },
              "02_clone_chef_recipe" : {
                "command" : "git clone https://github.com/iijima-toru-asdf/webap_materials.git /root/git"
              },
              "03_change_directory" : {
                "command" : "cd /root/git"
              },
              "06_copy_chef_recipe" : {
                "command" : "/bin/cp -fp /root/git/chef/recipes/* /tmp/cookbooks/devops/recipes/"
              },
              "07_copy_chef_files" : {
                "command" : "/bin/cp -fp /root/git/chef/files/* /tmp/cookbooks/devops/files/default/"
              },
              "08_copy_chef_template" : {
                "command" : "/bin/cp -fp /root/git/chef/templates/* /tmp/cookbooks/devops/templates/default/"
              },
              "09_copy_chef_config" : {
                "command" : "/bin/cp -fp /root/git/chef/config/* /tmp/cookbooks/"
              },
              "10_copy_chef_runlist" : {
                "command" : "/bin/cp -fp /root/git/chef/runlist/* /tmp/cookbooks/"
              }
            }
          },

          "2nd-bootstrap_settings" : {
            "commands" : {
              "00_setting_sleep" : {
                "command" : "echo \"/bin/sleep 30\" >> /etc/rc.d/rc.local"
              },
              "01_setting_execute_chef-solo" : {
                "command" : "echo \"/usr/bin/chef-solo -j /tmp/cookbooks/setup_webap.json -c /tmp/cookbooks/solo.rb\" >> /etc/rc.d/rc.local"
              },
              "02_settings_cfn-signal_result" : {
                "command" : { "Fn::Join" : ["", ["echo \"/opt/aws/bin/cfn-signal --exit-code \"'$?'\" --reason chef-solo_execute '", { "Ref" : "ApplicationInstanceWaitHandle" }, "' \"  >> /etc/rc.d/rc.local"]]}
              },
              "03_commentout_sleep" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sleep@#/bin/sleep@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "04_commentout_chef-solo" : {
                "command" : "echo \"/bin/sed -i 's@/usr/bin/chef-solo@#/usr/bin/chef-solo@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "05_commentout_cfn-signal" : {
                "command" : "echo \"/bin/sed -i 's@/opt/aws/bin/cfn-signal@#/opt/aws/bin/cfn-signal@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              },
              "06_commentout_sed" : {
                "command" : "echo \"/bin/sed -i 's@/bin/sed@#/bin/sed@g' /etc/rc.d/rc.local\" >> /etc/rc.d/rc.local"
              }
            }
          }
        }
      }
    },

    "ApplicationInstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },

    "ApplicationInstanceWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "ApplicationInstanceWaitHandle"},
        "Count"  : { "Ref" : "WebServerCapacity" },
        "Timeout" : "43000"
      }
    }
  },


  "Outputs": {
    "BastionPublicIP" : {
      "Description": "Bastion Instance Public IP Address",
      "Value" : { "Fn::GetAtt" : [ "BastionInstance", "PublicIp" ] }
    },
    "ElasticLoadBalancerEndpointAddress" : {
      "Description": "ElasticLoadBalancer Endpoint DNS-Name",
      "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ] }
    },
    "BastionPrivateIP" : {
      "Description": "Bastion Instance Private IP Address",
      "Value" : { "Fn::GetAtt" : [ "BastionInstance", "PrivateIp" ] }
    },
    "NATPrivateIP" : {
      "Description": "NAT Instance Private IP Address",
      "Value" : { "Fn::GetAtt" : [ "NATInstance", "PrivateIp" ] }
    },
    "DatabasePrivateIP" : {
      "Description": "DB Instance Private IP Address",
      "Value" : { "Fn::GetAtt" : [ "DatabaseInstance", "PrivateIp" ] }
    }
  }
}
